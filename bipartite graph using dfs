class Solution {
public:
vector<vector >g;
vectorvisited;
vectorcolor;
bool dfs(int s,int c)
{
visited[s]=1;
color[s]=c;
for(int i=0;i<g[s].size();i++)
{
if(visited[g[s][i]]==0)
{
if(!dfs(g[s][i],c^1))
return false;
}
else
{
if(color[s]==color[g[s][i]])
return false;
}
}
return true;

}

bool isBipartite(vector<vector<int>>& graph) {
    
    int n=graph.size();
    ///initialize graph ,color and visited array
    for(int i=0;i<n;i++)
    {
        vector<int>v;
        g.push_back(v);
        color.push_back(-1);
        visited.push_back(0);
        
    }
    ///input the graph like 0==1->2->3->
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<graph[i].size();j++)
        {
            g[i].push_back(graph[i][j]);
            g[graph[i][j]].push_back(i);
        }
    }
    bool ans;
    for(int i=0;i<n;i++)
    {
        if(visited[i]==0)
          ans=dfs(i,1);
        if(ans==false)
            return false;
        
        
    }
    return true;
   
    
    
    
}
};

#include <bits/stdc++.h>


using namespace std;

int main()
{
///create a graph;
    vector<vector<pair<int,int> > >graph;
    int n=7;
    for(int i=0;i<n;i++)
    {
        vector<pair<int,int> >p;
        graph.push_back(p);
    }
    graph[0].push_back(make_pair(2,1));
    graph[0].push_back(make_pair(3,2));

    graph[1].push_back(make_pair(2,0));
    graph[1].push_back(make_pair(1,5));
    graph[1].push_back(make_pair(4,3));

    graph[2].push_back(make_pair(3,0));
    graph[2].push_back(make_pair(2,5));

    graph[3].push_back(make_pair(4,1));
    graph[3].push_back(make_pair(1, 4));
    graph[3].push_back(make_pair(2, 6));

    graph[4].push_back(make_pair(1, 3));
    graph[4].push_back(make_pair(2, 5));
    graph[4].push_back(make_pair(1, 6));

    graph[5].push_back(make_pair(1, 1));
    graph[5].push_back(make_pair(2, 2));
    graph[5].push_back(make_pair(2, 4));
    graph[5].push_back(make_pair(2, 6));

    graph[6].push_back(make_pair(2, 3));
    graph[6].push_back(make_pair(1, 4));
    graph[6].push_back(make_pair(2, 5));
    
///distance initialize with a big number 
    vector<int>dist(n,1000000007);
    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >pq;     /// min heap syntax    " priority_queue<int ,vector<int>,greater<int > >pq;"
    pq.push(make_pair(0,0));
    dist[0]=0;
    while(!pq.empty())
    {
        int temp=pq.top().second;
        pq.pop();
        for(int i=0;i<graph[temp].size();i++)
        {
            int v=graph[temp][i].second;
            int w=graph[temp][i].first;
            
            ///check v's distance is greater ??? then update with smaller distance
            if(dist[v]>dist[temp]+w)
            {
                dist[v]=dist[temp]+w;
                pq.push(make_pair(dist[v],v));
            }
        }
    }
    ///print the distance of each node;
    for(int i=0;i<dist.size();i++)
        cout<<dist[i]<<" ";


    return 0;
}
